/*
 * School Management System API
 * APIs for managing branches, employees, students, receipts, etc.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tejabhargavpodila@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SchoolManagementSystemApi);
  }
}(this, function(expect, SchoolManagementSystemApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Receipt', function() {
      beforeEach(function() {
        instance = new SchoolManagementSystemApi.Receipt();
      });

      it('should create an instance of Receipt', function() {
        // TODO: update the code to test Receipt
        expect(instance).to.be.a(SchoolManagementSystemApi.Receipt);
      });

      it('should have the property receiptNumber (base name: "receiptNumber")', function() {
        // TODO: update the code to test the property receiptNumber
        expect(instance).to.have.property('receiptNumber');
        // expect(instance.receiptNumber).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfPayment (base name: "dateOfPayment")', function() {
        // TODO: update the code to test the property dateOfPayment
        expect(instance).to.have.property('dateOfPayment');
        // expect(instance.dateOfPayment).to.be(expectedValueLiteral);
      });

      it('should have the property studentName (base name: "studentName")', function() {
        // TODO: update the code to test the property studentName
        expect(instance).to.have.property('studentName');
        // expect(instance.studentName).to.be(expectedValueLiteral);
      });

      it('should have the property parentName (base name: "parentName")', function() {
        // TODO: update the code to test the property parentName
        expect(instance).to.have.property('parentName');
        // expect(instance.parentName).to.be(expectedValueLiteral);
      });

      it('should have the property applicationNumber (base name: "applicationNumber")', function() {
        // TODO: update the code to test the property applicationNumber
        expect(instance).to.have.property('applicationNumber');
        // expect(instance.applicationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property registeredMobileNumber (base name: "registeredMobileNumber")', function() {
        // TODO: update the code to test the property registeredMobileNumber
        expect(instance).to.have.property('registeredMobileNumber');
        // expect(instance.registeredMobileNumber).to.be(expectedValueLiteral);
      });

      it('should have the property batch (base name: "batch")', function() {
        // TODO: update the code to test the property batch
        expect(instance).to.have.property('batch');
        // expect(instance.batch).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfJoining (base name: "dateOfJoining")', function() {
        // TODO: update the code to test the property dateOfJoining
        expect(instance).to.have.property('dateOfJoining');
        // expect(instance.dateOfJoining).to.be(expectedValueLiteral);
      });

      it('should have the property stream (base name: "stream")', function() {
        // TODO: update the code to test the property stream
        expect(instance).to.have.property('stream');
        // expect(instance.stream).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property branch (base name: "branch")', function() {
        // TODO: update the code to test the property branch
        expect(instance).to.have.property('branch');
        // expect(instance.branch).to.be(expectedValueLiteral);
      });

      it('should have the property residenceType (base name: "residenceType")', function() {
        // TODO: update the code to test the property residenceType
        expect(instance).to.have.property('residenceType');
        // expect(instance.residenceType).to.be(expectedValueLiteral);
      });

      it('should have the property firstYeartuitionFeePayable (base name: "firstYeartuitionFeePayable")', function() {
        // TODO: update the code to test the property firstYeartuitionFeePayable
        expect(instance).to.have.property('firstYeartuitionFeePayable');
        // expect(instance.firstYeartuitionFeePayable).to.be(expectedValueLiteral);
      });

      it('should have the property firstYeartuitionFeePaid (base name: "firstYeartuitionFeePaid")', function() {
        // TODO: update the code to test the property firstYeartuitionFeePaid
        expect(instance).to.have.property('firstYeartuitionFeePaid');
        // expect(instance.firstYeartuitionFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearHostelFeePayable (base name: "firstYearHostelFeePayable")', function() {
        // TODO: update the code to test the property firstYearHostelFeePayable
        expect(instance).to.have.property('firstYearHostelFeePayable');
        // expect(instance.firstYearHostelFeePayable).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearHostelFeePaid (base name: "firstYearHostelFeePaid")', function() {
        // TODO: update the code to test the property firstYearHostelFeePaid
        expect(instance).to.have.property('firstYearHostelFeePaid');
        // expect(instance.firstYearHostelFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property secondYeartuitionFeePayable (base name: "secondYeartuitionFeePayable")', function() {
        // TODO: update the code to test the property secondYeartuitionFeePayable
        expect(instance).to.have.property('secondYeartuitionFeePayable');
        // expect(instance.secondYeartuitionFeePayable).to.be(expectedValueLiteral);
      });

      it('should have the property secondYeartuitionFeePaid (base name: "secondYeartuitionFeePaid")', function() {
        // TODO: update the code to test the property secondYeartuitionFeePaid
        expect(instance).to.have.property('secondYeartuitionFeePaid');
        // expect(instance.secondYeartuitionFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearHostelFeePayable (base name: "secondYearHostelFeePayable")', function() {
        // TODO: update the code to test the property secondYearHostelFeePayable
        expect(instance).to.have.property('secondYearHostelFeePayable');
        // expect(instance.secondYearHostelFeePayable).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearHostelFeePaid (base name: "secondYearHostelFeePaid")', function() {
        // TODO: update the code to test the property secondYearHostelFeePaid
        expect(instance).to.have.property('secondYearHostelFeePaid');
        // expect(instance.secondYearHostelFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearTotaltuitionFeePaid (base name: "firstYearTotaltuitionFeePaid")', function() {
        // TODO: update the code to test the property firstYearTotaltuitionFeePaid
        expect(instance).to.have.property('firstYearTotaltuitionFeePaid');
        // expect(instance.firstYearTotaltuitionFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearTotaltuitionFeePending (base name: "firstYearTotaltuitionFeePending")', function() {
        // TODO: update the code to test the property firstYearTotaltuitionFeePending
        expect(instance).to.have.property('firstYearTotaltuitionFeePending');
        // expect(instance.firstYearTotaltuitionFeePending).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearTotalHostelFeePaid (base name: "firstYearTotalHostelFeePaid")', function() {
        // TODO: update the code to test the property firstYearTotalHostelFeePaid
        expect(instance).to.have.property('firstYearTotalHostelFeePaid');
        // expect(instance.firstYearTotalHostelFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property firstYearTotalHostelFeePending (base name: "firstYearTotalHostelFeePending")', function() {
        // TODO: update the code to test the property firstYearTotalHostelFeePending
        expect(instance).to.have.property('firstYearTotalHostelFeePending');
        // expect(instance.firstYearTotalHostelFeePending).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearTotaltuitionFeePaid (base name: "secondYearTotaltuitionFeePaid")', function() {
        // TODO: update the code to test the property secondYearTotaltuitionFeePaid
        expect(instance).to.have.property('secondYearTotaltuitionFeePaid');
        // expect(instance.secondYearTotaltuitionFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearTotaltuitionFeePending (base name: "secondYearTotaltuitionFeePending")', function() {
        // TODO: update the code to test the property secondYearTotaltuitionFeePending
        expect(instance).to.have.property('secondYearTotaltuitionFeePending');
        // expect(instance.secondYearTotaltuitionFeePending).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearTotalHostelFeePaid (base name: "secondYearTotalHostelFeePaid")', function() {
        // TODO: update the code to test the property secondYearTotalHostelFeePaid
        expect(instance).to.have.property('secondYearTotalHostelFeePaid');
        // expect(instance.secondYearTotalHostelFeePaid).to.be(expectedValueLiteral);
      });

      it('should have the property secondYearTotalHostelFeePending (base name: "secondYearTotalHostelFeePending")', function() {
        // TODO: update the code to test the property secondYearTotalHostelFeePending
        expect(instance).to.have.property('secondYearTotalHostelFeePending');
        // expect(instance.secondYearTotalHostelFeePending).to.be(expectedValueLiteral);
      });

      it('should have the property modeOfPayment (base name: "modeOfPayment")', function() {
        // TODO: update the code to test the property modeOfPayment
        expect(instance).to.have.property('modeOfPayment');
        // expect(instance.modeOfPayment).to.be(expectedValueLiteral);
      });

      it('should have the property chequeNumber (base name: "chequeNumber")', function() {
        // TODO: update the code to test the property chequeNumber
        expect(instance).to.have.property('chequeNumber');
        // expect(instance.chequeNumber).to.be(expectedValueLiteral);
      });

    });
  });

}));
